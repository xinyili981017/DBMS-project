
INSERT INTO USERS(USER_ID,FIRST_NAME,LAST_NAME,YEAR_OF_BIRTH,MONTH_OF_BIRTH,DAY_OF_BIRTH,GENDER)
    select DISTINCT USER_ID,
           FIRST_NAME,
           LAST_NAME,
           YEAR_OF_BIRTH,
           MONTH_OF_BIRTH,
           DAY_OF_BIRTH,
           GENDER
      -- FROM test.PUBLIC_USER_INFORMATION
         FROM project1.PUBLIC_USER_INFORMATION;

-- CREATE TABLE USERS (
--     USER_ID NUMBER,
--     FIRST_NAME VARCHAR2(100) NOT NULL,
--     LAST_NAME VARCHAR2(100) NOT NULL,
--     YEAR_OF_BIRTH INTEGER,
--     MONTH_OF_BIRTH INTEGER,
--     DAY_OF_BIRTH INTEGER,
--     GENDER VARCHAR2(100),
-- PRIMARY KEY (USER_ID)
-- );
INSERT INTO FRIENDS(USER1_ID,USER2_ID)
    SELECT DISTINCT USER1_ID,USER2_ID
--- 1: ??? 什么意思，该不该两个distinct？？
       FROM project1.PUBLIC_ARE_FRIENDS
MINUS
----修改1  怎么用的union
SELECT A.USER1_ID, A.USER2_ID
    FROM (project1.PUBLIC_ARE_FRIENDS A
        INNER JOIN project1.PUBLIC_ARE_FRIENDS B
            ON A.USER1_ID=B.USER2_ID
            AND A.USER2_ID=B.USER1_ID
            AND A.USER1_ID>B.USER1_ID);
--免得把copy也删掉了

-- CREATE TABLE FRIENDS (
--     USER1_ID NUMBER,
--     USER2_ID NUMBER,
-- PRIMARY KEY (USER1_ID, USER2_ID),
-- FOREIGN KEY (USER1_ID) REFERENCES USERS(USER_ID),
-- FOREIGN KEY (USER2_ID) REFERENCES USERS(USER_ID)
-- );
INSERT INTO CITIES(CITY_NAME,STATE_NAME,COUNTRY_NAME)
--- 2: CITIES的city_id 在哪里加入
    SELECT DISTINCT CURRENT_CITY,CURRENT_STATE,CURRENT_COUNTRY
----- 3: 这里三者的city name不会重复吗？为何这里单独用distinct？？不需要括号？？
      FROM project1.PUBLIC_USER_INFORMATION
UNION
    SELECT DISTINCT HOMETOWN_CITY,HOMETOWN_STATE,HOMETOWN_COUNTRY
      FROM project1.PUBLIC_USER_INFORMATION
UNION
    SELECT DISTINCT EVENT_CITY,EVENT_STATE,EVENT_COUNTRY
      FROM project1.PUBLIC_EVENT_INFORMATION;

-- CREATE TABLE CITIES (
--     CITY_ID INTEGER,
--     CITY_NAME VARCHAR2(100) NOT NULL,
--     STATE_NAME VARCHAR2(100) NOT NULL,
--     COUNTRY_NAME VARCHAR2(100) NOT NULL,
-- PRIMARY KEY (CITY_ID),
-- UNIQUE (CITY_NAME, STATE_NAME, COUNTRY_NAME)
-- );
INSERT INTO USER_CURRENT_CITIES(USER_ID,CURRENT_CITY_ID)
    SELECT DISTINCT USER_ID,CITIES.CITY_ID
----4: 该不该加括号
        FROM project1.PUBLIC_USER_INFORMATION
JOIN CITIES
ON project1.PUBLIC_USER_INFORMATION.CURRENT_CITY = CITIES.CITY_NAME
AND project1.PUBLIC_USER_INFORMATION.CURRENT_STATE = CITIES.STATE_NAME
AND project1.PUBLIC_USER_INFORMATION.CURRENT_COUNTRY = CITIES.COUNTRY_NAME;


-- CREATE TABLE USER_CURRENT_CITIES (
--     USER_ID NUMBER,
--     CURRENT_CITY_ID NUMBER,
-- PRIMARY KEY (USER_ID, CURRENT_CITY_ID),
-- FOREIGN KEY (USER_ID) REFERENCES USERS,
-- FOREIGN KEY (CURRENT_CITY_ID) REFERENCES CITIES(CITY_ID)
-- );
INSERT INTO USER_HOMETOWN_CITIES(USER_ID,HOMETOWN_CITY_ID)
    SELECT DISTINCT USER_ID,CITIES.CITY_ID
----4: 该不该加括号
        FROM project1.PUBLIC_USER_INFORMATION
JOIN CITIES
ON project1.PUBLIC_USER_INFORMATION.HOMETOWN_CITY = CITIES.CITY_NAME
AND project1.PUBLIC_USER_INFORMATION.HOMETOWN_STATE = CITIES.STATE_NAME
AND project1.PUBLIC_USER_INFORMATION.HOMETOWN_COUNTRY = CITIES.COUNTRY_NAME;
-- CREATE TABLE USER_HOMETOWN_CITIES (
--     USER_ID NUMBER,
--     HOMETOWN_CITY_ID NUMBER,
-- PRIMARY KEY (USER_ID, HOMETOWN_CITY_ID),
-- FOREIGN KEY (USER_ID) REFERENCES USERS,
-- FOREIGN KEY (HOMETOWN_CITY_ID) REFERENCES CITIES(CITY_ID)
-- );
--
--
INSERT INTO PROGRAMS(INSTITUTION,CONCENTRATION,DEGREE)
SELECT DISTINCT INSTITUTION_NAME,PROGRAM_CONCENTRATION,PROGRAM_DEGREE
FROM project1.PUBLIC_USER_INFORMATION
WHERE INSTITUTION_NAME IS NOT NULL
AND PROGRAM_CONCENTRATION IS NOT NULL
AND PROGRAM_DEGREE IS NOT NULL;
-- CREATE TABLE PROGRAMS (
--     PROGRAM_ID NUMBER,
--     INSTITUTION VARCHAR2(100) NOT NULL,
--     CONCENTRATION VARCHAR2(100) NOT NULL,
--     DEGREE VARCHAR2(100) NOT NULL,
-- PRIMARY KEY (PROGRAM_ID),
-- UNIQUE (INSTITUTION, CONCENTRATION, DEGREE)
-- );
INSERT INTO EDUCATION(USER_ID,PROGRAM_ID,PROGRAM_YEAR)
    SELECT DISTINCT USER_ID,PROGRAMS.PROGRAM_ID,PROGRAM_YEAR
        FROM project1.PUBLIC_USER_INFORMATION
JOIN PROGRAMS
ON project1.PUBLIC_USER_INFORMATION.INSTITUTION_NAME = PROGRAMS.INSTITUTION
AND project1.PUBLIC_USER_INFORMATION.PROGRAM_CONCENTRATION = PROGRAMS.CONCENTRATION
AND project1.PUBLIC_USER_INFORMATION.PROGRAM_DEGREE = PROGRAMS.DEGREE;
-- CREATE TABLE EDUCATION (
--     USER_ID NUMBER,
--     PROGRAM_ID INTEGER,
--     PROGRAM_YEAR INTEGER NOT NULL,
-- PRIMARY KEY (USER_ID, PROGRAM_ID),
-- FOREIGN KEY (USER_ID) REFERENCES USERS,
-- FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAMS
-- );
---！！！！
INSERT INTO USER_EVENTS(EVENT_ID,EVENT_CREATOR_ID,EVENT_NAME,EVENT_TAGLINE,EVENT_DESCRIPTION,EVENT_HOST,
EVENT_TYPE,EVENT_SUBTYPE,EVENT_ADDRESS,EVENT_CITY_ID,EVENT_START_TIME,EVENT_END_TIME)
    SELECT DISTINCT EVENT_ID,EVENT_CREATOR_ID,EVENT_NAME,EVENT_TAGLINE,EVENT_DESCRIPTION,EVENT_HOST,
EVENT_TYPE,EVENT_SUBTYPE,EVENT_ADDRESS,CITIES.CITY_ID,EVENT_START_TIME,EVENT_END_TIME
        FROM project1.PUBLIC_EVENT_INFORMATION
JOIN CITIES
ON project1.PUBLIC_EVENT_INFORMATION.EVENT_CITY = CITIES.CITY_NAME
AND project1.PUBLIC_EVENT_INFORMATION.EVENT_STATE = CITIES.STATE_NAME
AND project1.PUBLIC_EVENT_INFORMATION.EVENT_COUNTRY = CITIES.COUNTRY_NAME;

-- CREATE TABLE USER_EVENTS (
--     EVENT_ID NUMBER,
--     EVENT_CREATOR_ID NUMBER NOT NULL,
--     EVENT_NAME VARCHAR2(100) NOT NULL,
--     EVENT_TAGLINE VARCHAR2(100),
--     EVENT_DESCRIPTION VARCHAR2(100),
--     EVENT_HOST VARCHAR2(100),
--     EVENT_TYPE VARCHAR2(100),
--     EVENT_SUBTYPE VARCHAR2(100),
--     EVENT_ADDRESS VARCHAR2(2000),
--     EVENT_CITY_ID INTEGER NOT NULL,
--     EVENT_START_TIME TIMESTAMP,
--     EVENT_END_TIME TIMESTAMP,
-- PRIMARY KEY (EVENT_ID),
-- FOREIGN KEY (EVENT_CREATOR_ID) REFERENCES USERS(USER_ID),
-- FOREIGN KEY (EVENT_CITY_ID) REFERENCES CITIES(CITY_ID)
-- );
--
--！！！！
set autocommit off;
---6: 为何要写这个？？
INSERT INTO ALBUMS(ALBUM_ID,ALBUM_OWNER_ID,ALBUM_NAME,ALBUM_CREATED_TIME,ALBUM_MODIFIED_TIME,ALBUM_LINK,ALBUM_VISIBILITY,COVER_PHOTO_ID)
    SELECT DISTINCT ALBUM_ID,OWNER_ID,ALBUM_NAME,ALBUM_CREATED_TIME,ALBUM_MODIFIED_TIME,ALBUM_LINK,ALBUM_VISIBILITY,COVER_PHOTO_ID
        FROM project1.PUBLIC_PHOTO_INFORMATION;
-- CREATE TABLE ALBUMS (
--     ALBUM_ID NUMBER,
--     ALBUM_OWNER_ID NUMBER NOT NULL,
--     ALBUM_NAME VARCHAR2(100) NOT NULL,
--     ALBUM_CREATED_TIME TIMESTAMP NOT NULL,
--     ALBUM_MODIFIED_TIME TIMESTAMP,
--     ALBUM_LINK VARCHAR2(100) NOT NULL,
--     ALBUM_VISIBILITY VARCHAR2(100),
--     COVER_PHOTO_ID NUMBER NOT NULL,
-- PRIMARY KEY (ALBUM_ID),
-- FOREIGN KEY (ALBUM_OWNER_ID) REFERENCES USERS(USER_ID),
-- CHECK (
--     ALBUM_VISIBILITY in (
--         'EVERYONE', 'FRIENDS', 'FRIENDS_OF_FRIENDS', 'MYSELF'
--     )
-- )
-- );
--
--！！！！！
INSERT INTO PHOTOS(PHOTO_ID,ALBUM_ID,PHOTO_CAPTION,PHOTO_CREATED_TIME,PHOTO_MODIFIED_TIME,PHOTO_LINK)
    SELECT DISTINCT PHOTO_ID,ALBUM_ID,PHOTO_CAPTION,PHOTO_CREATED_TIME,PHOTO_MODIFIED_TIME,PHOTO_LINK
        FROM project1.PUBLIC_PHOTO_INFORMATION
COMMIT;
set autocommit on;
-- CREATE TABLE PHOTOS (
--     PHOTO_ID NUMBER,
--     ALBUM_ID NUMBER NOT NULL,
--     PHOTO_CAPTION VARCHAR2(2000),
--     PHOTO_CREATED_TIME TIMESTAMP NOT NULL,
--     PHOTO_MODIFIED_TIME TIMESTAMP,
--     PHOTO_LINK VARCHAR2(2000) NOT NULL,
-- PRIMARY KEY (PHOTO_ID),
-- FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS
-- );
--
-- ALTER TABLE ALBUMS
-- ADD CONSTRAINT Photo_to_album
--     FOREIGN KEY (COVER_PHOTO_ID) REFERENCES PHOTOS(PHOTO_ID)
-- INITIALLY DEFERRED DEFERRABLE;
INSERT INTO TAGS(TAG_PHOTO_ID,TAG_SUBJECT_ID,TAG_CREATED_TIME,TAG_X,TAG_Y)
    SELECT DISTINCT PHOTO_ID,TAG_SUBJECT_ID,TAG_CREATED_TIME,TAG_X_COORDINATE,TAG_Y_COORDINATE
        FROM project1.PUBLIC_TAG_INFORMATION;

-- CREATE TABLE TAGS (
--     TAG_PHOTO_ID NUMBER,
--     TAG_SUBJECT_ID NUMBER,
--     TAG_CREATED_TIME TIMESTAMP NOT NULL,
--     TAG_X NUMBER NOT NULL,
--     TAG_Y NUMBER NOT NULL,
-- PRIMARY KEY (TAG_PHOTO_ID, TAG_SUBJECT_ID),
-- FOREIGN KEY (TAG_PHOTO_ID) REFERENCES PHOTOS(PHOTO_ID),
-- FOREIGN KEY (TAG_SUBJECT_ID) REFERENCES USERS(USER_ID)
-- );
--
--
-- --triggers
-- CREATE SEQUENCE city_seq_id
-- START WITH 1
-- INCREMENT BY 1;
--
-- CREATE TRIGGER city_tri_id
--     BEFORE INSERT ON CITIES
--     FOR EACH ROW
--     BEGIN
--         SELECT city_seq_id.NEXTVAL INTO :NEW.CITY_ID FROM DUAL;
--     END;
-- /
--
-- CREATE SEQUENCE program_seq_id
-- START WITH 1
-- INCREMENT BY 1;
--
-- CREATE TRIGGER program_tri_id
--     BEFORE INSERT ON PROGRAMS
--     FOR EACH ROW
--     BEGIN
--         SELECT program_seq_id.NEXTVAL INTO :NEW.PROGRAM_ID FROM DUAL;
--     END;
-- /
-- CREATE TRIGGER order_friends_pairs
--     BEFORE INSERT ON FRIENDS
--     FOR EACH ROW
--            DECLARE temp NUMBER;
--            BEGIN
--                 IF :NEW.USER1_ID > :NEW.USER2_ID THEN
--                     temp := :NEW.USER2_ID;
--                     :NEW.USER2_ID := :NEW.USER1_ID;
--                     :NEW.USER1_ID := temp;
--                 END IF;
--
--             END;
-- /

-- create table test as (select * from project1.PUBLIC_USER_INFORMATION);
